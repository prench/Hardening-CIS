---
- name: Security hardening based on CIS Standards
  hosts: all
  vars:
    id:
     - usr: root
     - usr: oracle
  tasks:

   - name: Secure /etc/security - mode 0750
     file:
      path: /etc/security
      mode: 0750

   - name: Secure files under /etc/security - mode go-w,o-rx
     file:
      path: /etc/security
      recurse: yes
      owner: root
      group: security
      mode: "go-w,o-rx"
     register: security

   - name: Secure cron.allow - mode root.sys 0400
     file:
      path: /var/adm/cron/cron.allow
      owner: root
      group: sys
      mode: 0400

   - name: Secure /etc/motd - mode bin.bin 0644
     file:
      path: /etc/motd
      owner: bin
      group: bin
      mode: 0644

   - name: Secure /var/adm/ras - mode o-rw
     file:
      path: /var/adm/ras
      recurse: yes
      mode: "o-rw"

   - name: Secure files under /var directory - mode o-rw
     file:
      path: "{{ item }}"
      mode: "o-rw"
      state: absent
     loop:
       - /var/ct/RMstart.log
       - /var/tmp/dpid2.log
       - /var/tmp/hostmibd.log
       - /var/tmp/snmpd.log
       - /var/adm/cron.log
       - /smit.log

   - name: Find users home folder
     shell: lsuser -a home ALL |cut -f2 -d = | grep -Ev '/$|/etc$|/var$|/opt$|/tmp$|/bin$'
     register: homefolder

   - name: Secure home folders - mode 0750
     file:
      path: "{{ item }}"
      mode: 0750
     ignore_errors: yes
     loop: "{{ homefolder.stdout_lines }}"

   - name: Secure /etc/group & /etc/passwd - mode root.security 0644
     file:
      path: "{{ item }}"
      owner: root
      group: security
      mode: 0644
     loop:
       - /etc/group
       - /etc/passwd

   - name: Secure files under /audit & /etc/security/audit - mode root.audit 0640
     file:
      path: "{{ item }}"
      owner: root
      group: audit
      recurse: yes
      mode: 0640
     loop:
       - /etc/security/audit
       - /audit

   - name: Secure /audit & /etc/security/audit - mode root.audit 0750
     file:
      path: "{{ item }}"
      owner: root
      group: audit
      mode: 0750
     loop:
       - /etc/security/audit
       - /audit

   - name: Secure crontab directory - mode .cron 0770
     file:
      path: /var/spool/cron/crontabs
      group: cron
      mode: 0770

   - name: Secure crontab files - mode o-rwx
     file:
      path: /var/spool/cron/crontabs
      group: cron
      recurse: yes
      mode: "o-rwx"

   - name: Disable Remote Services - mode ugo-rwx
     file:
      path: "{{ item }}"
      mode: "ugo-rwx"
     loop:
       - /usr/bin/rcp
       - /usr/bin/rlogin
       - /usr/sbin/rlogind
       - /usr/sbin/rshd
       - /usr/sbin/tftpd

   - name: TCP/IP hardening parameters
     command: no -p -o "{{ item }}"
     loop:
       - ipsrcrouteforward=0
       - bcastping=0
       - icmpaddressmask=0
       - udp_pmtu_discover=0
       - ipsrcrouterecv=0
       - nonlocsrcroute=0
       - tcp_tcpsecure=7
       - sockthresh=60
       - rfc1323=1
       - tcp_sendspace=262144
       - tcp_recvspace=262144
       - ipignoreredirects=1
       - tcp_mssdflt=1448
       - clean_partial_conns=1
       - ipsrcroutesend=0
       - ipforwarding=0
       - ipsendredirects=0
       - ip6srcrouteforward=0
       - directed_broadcast=0
       - tcp_pmtu_discover=0

   - name: TCP/IP hardening parameters - nfs
     command: nfso -p -o "{{ item }}"
     loop:
       - portcheck=1
       - nfs_use_reserved_ports=1

   - name: SNMP Configuration
     replace:
      path: /etc/snmpd.conf
      regexp: "{{ item.regexp }}"
      replace: "{{ item.line }}"
     loop:
       - { regexp: '^community(.+)public', line: '#community      public' }
       - { regexp: '^community(.+)private', line: '#community      private' }
       - { regexp: '^community(.+)system', line: '#community      system' }
       - { regexp: '(?P<comm>^community\s*\w*\s\b(?:\d{1,3}\.){3}\d{1,3}\b\s\b(?:\d{1,3}\.){3}\d{1,3}\b)\s(?P<rw>readWrite)', line: '\g<comm>      readOnly' }

   - name: Remove guest account
     user:
      name: guest
      state: absent
      remove: yes


   - name: Set passwd attribs
     replace:
       path: /etc/security/user
       regexp: "{{ item.regexp }}"
       replace: "{{ item.line }}"
       backup: yes
     loop:
        - { regexp: '(\tmindiff = )[0-3]', line: '\g<1>4' }
        - { regexp: '(\tmaxexpired = )-1', line: '\g<1>2' }
        - { regexp: '(\tminloweralpha = )0', line: '\g<1>1' }
        - { regexp: '(\tminupperalpha = )0', line: '\g<1>1' }
        - { regexp: '(\tmindigit = )0', line: '\g<1>1' }
        - { regexp: '(\tminspecialchar = )0', line: '\g<1>1' }
        - { regexp: '(\tminage = )0', line: '\g<1>1' }
        - { regexp: '(\tminalpha = )[0-1]', line: '\g<1>2' }
        - { regexp: '(\tminother = )[0-1]', line: '\g<1>2' }
        - { regexp: '(\tmaxrepeats = ).*$', line: '\g<1>2' }
        - { regexp: '(\thistexpire = )(.*)$', line: '\g<1>13' }
        - { regexp: '(\thistsize = )(.*)$', line: '\g<1>20' }
        - { regexp: '(\tloginretries = )(.*)$', line: '\g<1>3' }
        - { regexp: '(\tmaxage = )(.*)$', line: '\g<1>12' }
        - { regexp: '(\tminlen = )(.*)$', line: '\g<1>12' }


   - name: Check if admin accounts exist
     command: lsuser "{{ item.usr }}"
     register: lsusr
     loop: "{{ id }}"
     ignore_errors: yes

   - name: Set passwd attribs for admin accounts - maxage
     command: chuser maxage=8 {{ item.item.usr }}
     loop: "{{ lsusr.results }}"
     when: "item.rc == 0"

   - name: Set passwd attribs for admin accounts - minlen
     command: chuser minlen=15 {{ item.item.usr }}
     loop: "{{ lsusr.results }}"
     when: "item.rc == 0"

   - name: Set login attribs
     lineinfile:
       path: /etc/security/login.cfg
       regexp: "{{ item.regexp }}"
       line: "{{ item.line }}"
       backrefs: yes
       backup: yes
     loop:
        - { regexp: '(\tlogininterval = )(.*)$', line: '\g<1>300' }
        - { regexp: '(\tlogindisable = )(.*)$', line: '\g<1>10' }
        - { regexp: '(\tloginreenable =)(.*)$', line: '\g<1>360' }
        - { regexp: '(\tlogintimeout = )(.*)$', line: '\g<1>30' }
        - { regexp: '(\tlogindelay = )(.*)$', line: '\g<1>10' }
        - { regexp: '(\therald = ).*$', line: '\g<1>"SSE Authorised Access Only!\\n\\nLogin:"' }

   - name: Set encryption algorithm - ssha256
     lineinfile:
       path: /etc/security/login.cfg
       regexp: '(\tpwd_algorithm = )(.*)$'
       line: '\g<1>ssha256'
       backrefs: yes
       backup: yes

   - name: Find files older than 30 days under /etc/security
     find:
      paths: /etc/security
      patterns: 'login*~,user*~'
      age: 30d
     register: hkfiles

   - name: Delete files older than 30 days under /etc/security
     file:
      path: "{{ item.path }}"
      state: absent
     loop: "{{ hkfiles.files }}"
